probability = prob_case,
obs_id = 1 : length(stratum)))
data_sim_cases <- data_sim %>%
group_by(stratum)%>%
sample_n(n_cases, weight = probability)
Y[data_sim_cases$obs_id] <- 1
fit1 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda = c(1,4), p = p, standardize = TRUE)
str(fit1)
nonzero_index <- (beta != 0) * 1 #index of nonzero coefficients
table(fitted = (fit1$penalized != 0) * 1, nonzero_index)
fit2 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda = c(1,4),p = p, standardize = TRUE, alpha = 0.6)
knitr::opts_chunk$set(
collapse = TRUE,eval = T,
comment = "#>"
)
library(penalizedclr)
set.seed(1234)
library(tidyverse)
# two groups of predictors
p <- c(12, 40)
# percentage and number of non-null variables
p_nz <- c(0.5, 0.2)
m_nz <- round(p*p_nz, 0)
# number of different strata (case-control pairs)
K <- 100
# number of cases and controls in each stratum (not necessarily 1:1 matching,
# other designs are also allowed)
n_cases <- 1
n_ctrl <- 1
# generating covariates
X = cbind(matrix(rnorm(p[1] * K * (n_cases + n_ctrl), 0, 1), ncol = p[1]),
matrix(rnorm(p[2] * K * (n_cases + n_ctrl), 0, 4), ncol = p[2]))
# coefficients
beta <- as.matrix(c(rnorm(m_nz[1], 4, 1),
rep(0, p[1] - m_nz[1]),
rnorm(m_nz[2], 2, 0.8),
rep(0, p[2] - m_nz[2])), ncol = 1)
beta_stratum <- rep(rnorm(K, 0, 2), each = n_cases+n_ctrl)
# stratum membership
stratum <- rep(1:K, each= n_cases+n_ctrl)
# linear predictor
lin_pred <- beta_stratum + X %*% beta
prob_case <- exp(lin_pred) / (1 + exp(lin_pred))
# generate the response
Y <- rep(0, length(stratum))
data_sim <- as_tibble(data.frame(stratum = stratum,
probability = prob_case,
obs_id = 1 : length(stratum)))
data_sim_cases <- data_sim %>%
group_by(stratum)%>%
sample_n(n_cases, weight = probability)
Y[data_sim_cases$obs_id] <- 1
fit1 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda = c(1,4), p = p, standardize = TRUE)
str(fit1)
nonzero_index <- (beta != 0) * 1 #index of nonzero coefficients
table(fitted = (fit1$penalized != 0) * 1, nonzero_index)
fit2 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda = c(1,4),p = p, standardize = TRUE, alpha = 0.6)
stable1 <- stable.clr(response = Y, B = 50,
penalized = X, stratum = stratum,
lambda.seq = c(1, 4, 6), parallel = TRUE)
str(stable1)
subsample.clr.v(response = Y, B = 50,
+                       penalized = X, stratum = stratum,
subsample.clr.v(response = Y, B = 50,
+                       penalized = X, stratum = stratum,
library(penalizedclr)
fit <- subsample.clr(
response = Y,
stratum = stratum,
penalized = X,
unpenalized = NULL,
lambda = lambda)
knitr::opts_chunk$set(
collapse = TRUE,eval = T,
comment = "#>"
)
library(penalizedclr)
set.seed(1234)
library(tidyverse)
# two groups of predictors
p <- c(12, 40)
# percentage and number of non-null variables
p_nz <- c(0.5, 0.2)
m_nz <- round(p*p_nz, 0)
# number of different strata (case-control pairs)
K <- 100
# number of cases and controls in each stratum (not necessarily 1:1 matching,
# other designs are also allowed)
n_cases <- 1
n_ctrl <- 1
# generating covariates
X = cbind(matrix(rnorm(p[1] * K * (n_cases + n_ctrl), 0, 1), ncol = p[1]),
matrix(rnorm(p[2] * K * (n_cases + n_ctrl), 0, 4), ncol = p[2]))
# coefficients
beta <- as.matrix(c(rnorm(m_nz[1], 4, 1),
rep(0, p[1] - m_nz[1]),
rnorm(m_nz[2], 2, 0.8),
rep(0, p[2] - m_nz[2])), ncol = 1)
beta_stratum <- rep(rnorm(K, 0, 2), each = n_cases+n_ctrl)
# stratum membership
stratum <- rep(1:K, each= n_cases+n_ctrl)
# linear predictor
lin_pred <- beta_stratum + X %*% beta
prob_case <- exp(lin_pred) / (1 + exp(lin_pred))
# generate the response
Y <- rep(0, length(stratum))
data_sim <- as_tibble(data.frame(stratum = stratum,
probability = prob_case,
obs_id = 1 : length(stratum)))
data_sim_cases <- data_sim %>%
group_by(stratum)%>%
sample_n(n_cases, weight = probability)
Y[data_sim_cases$obs_id] <- 1
fit1 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda = c(1,4), p = p, standardize = TRUE)
str(fit1)
nonzero_index <- (beta != 0) * 1 #index of nonzero coefficients
table(fitted = (fit1$penalized != 0) * 1, nonzero_index)
fit2 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda = c(1,4),p = p, standardize = TRUE, alpha = 0.6)
stable1 <- stable.clr(response = Y, B = 50,
penalized = X, stratum = stratum,
lambda.seq = c(1, 4, 6), parallel = TRUE)
str(stable1)
hist(stable1$Pistab, xlab = "Selection probability", ylab="Frequency")
library(penalizedclr)
knitr::opts_chunk$set(
collapse = TRUE,eval = T,
comment = "#>"
)
library(penalizedclr)
set.seed(1234)
library(tidyverse)
# two groups of predictors
p <- c(12, 40)
# percentage and number of non-null variables
p_nz <- c(0.5, 0.2)
m_nz <- round(p*p_nz, 0)
# number of different strata (case-control pairs)
K <- 100
# number of cases and controls in each stratum (not necessarily 1:1 matching,
# other designs are also allowed)
n_cases <- 1
n_ctrl <- 1
# generating covariates
X = cbind(matrix(rnorm(p[1] * K * (n_cases + n_ctrl), 0, 1), ncol = p[1]),
matrix(rnorm(p[2] * K * (n_cases + n_ctrl), 0, 4), ncol = p[2]))
# coefficients
beta <- as.matrix(c(rnorm(m_nz[1], 4, 1),
rep(0, p[1] - m_nz[1]),
rnorm(m_nz[2], 2, 0.8),
rep(0, p[2] - m_nz[2])), ncol = 1)
beta_stratum <- rep(rnorm(K, 0, 2), each = n_cases+n_ctrl)
# stratum membership
stratum <- rep(1:K, each= n_cases+n_ctrl)
# linear predictor
lin_pred <- beta_stratum + X %*% beta
prob_case <- exp(lin_pred) / (1 + exp(lin_pred))
# generate the response
Y <- rep(0, length(stratum))
data_sim <- as_tibble(data.frame(stratum = stratum,
probability = prob_case,
obs_id = 1 : length(stratum)))
data_sim_cases <- data_sim %>%
group_by(stratum)%>%
sample_n(n_cases, weight = probability)
Y[data_sim_cases$obs_id] <- 1
fit1 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda = c(1,4), p = p, standardize = TRUE)
str(fit1)
nonzero_index <- (beta != 0) * 1 #index of nonzero coefficients
table(fitted = (fit1$penalized != 0) * 1, nonzero_index)
fit2 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda = c(1,4),p = p, standardize = TRUE, alpha = 0.6)
stable1 <- stable.clr(response = Y, B = 50,
penalized = X, stratum = stratum,
lambda.seq = c(1, 4, 6), parallel = TRUE)
str(stable1)
fit <- subsample.clr(
response = Y,
stratum = stratum,
penalized = X,
unpenalized = NULL,
lambda = lambda)
str(fit)
dim(X)
colnames(X)
fit$P
# class(res) <- c("list", "penclr")
return(res)
stable1 <- stable.clr(response = Y, B = 50,
penalized = X, stratum = stratum,
lambda.seq = c(1, 4, 6), parallel = FALSE)
str(stable1)
response = Y
stratum = stratum
penalized = X
unpenalized = NULL
lambda = lambda
if (missing(event) && is.factor(response)) event <- levels(response)[1]
event
parallel = T
standardize = T
alpha =
1
B = 50
lambda.seq = c(1, 4, 6)
fit <- subsample.clr(
response = response,
stratum = stratum,
penalized = penalized,
unpenalized = unpenalized,
lambda = lambda.seq[1],
alpha = alpha,
B = B,
matB = NULL,
return.matB = TRUE,
parallel = parallel,
standardize = standardize
)
length(lambda.seq == 1)
matB <- fit$matB
matB
dim(matB)
cl <- parallel::makeCluster(getOption("cl.cores", 2), setup_timeout = 0.5)
parallel::clusterExport(cl, varlist = c("penalized.clr"))
P <- expand.grid("B" = 1:nrow(matB), "lambda" = lambda.seq[-1])
res <- t(parallel::parApply(cl,
P,
1,
FUN = function(x,
response,
stratum,
penalized,
unpenalized,
matB,
alpha,
standardize) {
#require("penalized")
ind <- stratum %in% matB[x[1], ]
(penalized.clr(
response = response[ind],
stratum = stratum[ind],
penalized = penalized[ind, ],
unpenalized = unpenalized[ind, ],
lambda = x[2],
alpha = alpha,
standardize = standardize
)$penalized != 0) * 1
},
response,
stratum,
penalized,
unpenalized,
matB,
alpha,
standardize
))
P
dim(P)
res1 <- as.data.frame(cbind(P, res))
res2 <- stats::aggregate(
res,
list(lambda = res1$lambda),
mean
)
res <- t(rbind(fit$P, res2[, -c(1)]))
parallel::stopCluster(cl)
str(res)
dim(res)
Pistab <- apply(res, 1, max)
str(Pistab)
names(fit$Pistab)
names(X)
colnames(X)
names(Pistab)
res <- list(Pistab = Pistab, lambda.seq = lambda.seq)
res
colnames(X)
stable.clr <- function(response,
stratum,
penalized,
unpenalized = NULL,
lambda.seq,
alpha = 1,
B = 100,
parallel = TRUE,
standardize = TRUE,
event) {
if (missing(event) && is.factor(response)) event <- levels(response)[1]
if (is.factor(response)) response <- (response == event) * 1
if (!is.null(unpenalized) && !is.numeric(dim(unpenalized))) {
unpenalized <- as.matrix(unpenalized, nrow = nrow(penalized))
}
fit <- subsample.clr(
response = response,
stratum = stratum,
penalized = penalized,
unpenalized = unpenalized,
lambda = lambda.seq[1],
alpha = alpha,
B = B,
matB = NULL,
return.matB = TRUE,
parallel = parallel,
standardize = standardize
)
if (length(lambda.seq == 1)) {Pistab = fit$Pistab}else{
matB <- fit$matB
if (parallel) {
cl <- parallel::makeCluster(getOption("cl.cores", 2), setup_timeout = 0.5)
parallel::clusterExport(cl, varlist = c("penalized.clr"))
P <- expand.grid("B" = 1:nrow(matB), "lambda" = lambda.seq[-1])
res <- t(parallel::parApply(cl,
P,
1,
FUN = function(x,
response,
stratum,
penalized,
unpenalized,
matB,
alpha,
standardize) {
#require("penalized")
ind <- stratum %in% matB[x[1], ]
(penalized.clr(
response = response[ind],
stratum = stratum[ind],
penalized = penalized[ind, ],
unpenalized = unpenalized[ind, ],
lambda = x[2],
alpha = alpha,
standardize = standardize
)$penalized != 0) * 1
},
response,
stratum,
penalized,
unpenalized,
matB,
alpha,
standardize
))
res1 <- as.data.frame(cbind(P, res))
res2 <- stats::aggregate(
res,
list(lambda = res1$lambda),
mean
)
res <- t(rbind(fit$P, res2[, -c(1)]))
parallel::stopCluster(cl)
} else {
res <- subsample.clr.v(
response = response,
stratum = stratum,
penalized = penalized,
unpenalized = unpenalized,
lambda = lambda.seq[-1],
alpha = alpha,
B = B,
matB = fit$matB,
parallel = FALSE,
standardize = standardize
)
res <- cbind(fit$P, res)
}
Pistab <- apply(res, 1, max)
#names(Pistab) <- names(fit$Pistab)
}
res <- list(Pistab = Pistab, lambda.seq = lambda.seq)
# class(res) <- c("list", "penclr")
return(res)
}
stable1 <- stable.clr(response = Y, B = 50,
penalized = X, stratum = stratum,
lambda.seq = c(1, 4, 6), parallel = TRUE)
str(stable1)
library(penalizedclr)
pf <- default.pf(response = Y, stratum = stratum, penalized = X,
nfolds = 10, alpha = 0.3,
standardize = TRUE, p = p, type.step1 = "comb")
pf
?default.pf
pf <- default.pf(response = Y, stratum = stratum, penalized = X,
nfolds = 10, alpha = 0.3,
standardize = TRUE, p = p, type.step1 = "comb", verbose = T)
library(penalizedclr)
pf <- default.pf(response = Y, stratum = stratum, penalized = X,
nfolds = 10, alpha = 0.3,
standardize = TRUE, p = p, type.step1 = "comb", verbose = T)
paste0("The data adaptive vector of penalty factors is ", pf, collapse = "")
paste0("The data adaptive vector of penalty factors is ", round(pf,3), collapse = "")
round(pf,3)
pf
message(paste0("The data adaptive vector of penalty factors is ",pf, collapse = ""))
exc <-1
paste0("The data adaptive vector of penalty factors is ", pf," and the modality(ies) that have been excluded are ", exc, collapse =""))
message(paste0("The data adaptive vector of penalty factors is ", pf," and the modality(ies) that have been excluded are ", exc, collapse =""))
library(penalizedclr)
knitr::opts_chunk$set(
collapse = TRUE,eval = T,
comment = "#>"
)
library(penalizedclr)
set.seed(1234)
library(tidyverse)
# two groups of predictors
p <- c(12, 40)
# percentage and number of non-null variables
p_nz <- c(0.5, 0.2)
m_nz <- round(p*p_nz, 0)
# number of different strata (case-control pairs)
K <- 100
# number of cases and controls in each stratum (not necessarily 1:1 matching,
# other designs are also allowed)
n_cases <- 1
n_ctrl <- 1
# generating covariates
X = cbind(matrix(rnorm(p[1] * K * (n_cases + n_ctrl), 0, 1), ncol = p[1]),
matrix(rnorm(p[2] * K * (n_cases + n_ctrl), 0, 4), ncol = p[2]))
# coefficients
beta <- as.matrix(c(rnorm(m_nz[1], 4, 1),
rep(0, p[1] - m_nz[1]),
rnorm(m_nz[2], 2, 0.8),
rep(0, p[2] - m_nz[2])), ncol = 1)
# stratum membership
stratum <- rep(1:K, each= n_cases+n_ctrl)
# linear predictor
lin_pred <-  X %*% beta
prob_case <- exp(lin_pred) / (1 + exp(lin_pred))
# generate the response
Y <- rep(0, length(stratum))
data_sim <- as_tibble(data.frame(stratum = stratum,
probability = prob_case,
obs_id = 1 : length(stratum)))
data_sim_cases <- data_sim %>%
group_by(stratum)%>%
sample_n(n_cases, weight = probability)
Y[data_sim_cases$obs_id] <- 1
fit1 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda = c(1,4), p = p, standardize = TRUE)
str(fit1)
nonzero_index <- (beta != 0) * 1 #index of nonzero coefficients
table(fitted = (fit1$penalized != 0) * 1, nonzero_index)
fit2 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda = c(1,4),p = p, standardize = TRUE, alpha = 0.6)
stable1 <- stable.clr(response = Y, B = 50,
penalized = X, stratum = stratum,
lambda.seq = c(1, 4, 6), parallel = TRUE)
hist(stable1$Pistab, xlab = "Selection probability", ylab="Frequency")
(tab1 <- table(stable = (stable1$P>0.65) * 1, nonzero_index))
(tab1[1,1] + tab1[2,2])/(sum(tab1))
# plotting selection probabilities for true non-zero (red) and zero (blue) coefficients
s_prob_nonzero <- cut(stable1$P[nonzero_index == 1],
breaks = seq(0,1, by = 0.1), ordered_result = T)
s_prob_zero <- cut(stable1$P[nonzero_index == 0],
breaks = seq(0,1, by = 0.1), ordered_result = T)
barplot(table(s_prob_nonzero), col = 2)
barplot(table(s_prob_zero), add =T, col = 4 )
stable2 <- penalizedclr::stable.clr.g(response = Y, p = p,
standardize = TRUE,
penalized = X, stratum = stratum,
lambda.list = list(c(4,1), c(1,4)))
# histogram of selection probabilities
hist(stable2$P, xlab = "Selection probability", ylab="Frequency")
# table of true status vs. selection status
(tab2 <- table(stable = (stable2$P>0.65) * 1, nonzero_index))
# classification accuracy
(tab2[1,1] + tab2[2,2])/(sum(tab2))
# plotting selection probabilities for true non-zero (red) and zero (blue) coefficients
s_prob_nonzero <- cut(stable2$P[nonzero_index == 1],
breaks = seq(0,1, by = 0.1),
ordered_result = T)
s_prob_zero <- cut(stable2$P[nonzero_index == 0],
breaks = seq(0,1, by = 0.1),
ordered_result = T)
barplot(table(s_prob_nonzero), col = 2)
barplot(table(s_prob_zero), add = T, col = 4 )
(pf <- default.pf(response = Y, stratum = stratum, penalized = X,
nfolds = 10, alpha = 0.3,
standardize = TRUE, p = p, type.step1 = "comb"))
(lambda <- find.default.lambda(response = Y, penalized = X,
standardize = TRUE, stratum = stratum,
p = p,  pf.list  = pf))
stable3 <- stable.clr.g(response = Y, p = p,
standardize = TRUE,
penalized = X, stratum = stratum,
lambda.list = list(c(pf[[1]][1] *                                      as.numeric(lambda), pf[[1]][2] *                                       as.numeric(lambda))))
hist(stable3$P, xlab = "Selection probability", ylab="Frequency")
# plotting selection probabilities for true non-zero (red) and zero (blue) coefficients
s_prob_nonzero <- cut(stable3$P[nonzero_index == 1],
breaks = seq(0, 1, by = 0.1), ordered_result = T)
s_prob_zero <- cut(stable3$P[nonzero_index == 0],
breaks = seq(0, 1, by = 0.1), ordered_result = T)
barplot(table(s_prob_nonzero), col = 2)
barplot(table(s_prob_zero), add = T, col = 4 )
(tab3 <- table(stable = (stable3$P > 0.65) * 1, nonzero_index))
alt.pf.list<- list(c(1,4), c(2,4), c(4,1), c(4,2), pf$pf)
alt.lambda <- find.default.lambda(response = Y, penalized = X,
standardize = TRUE, stratum = stratum,
p = p,  pf.list  = alt.pf.list)
lambda.matrix <- mapply(function (x,y) x*y, lambda, alt.pf.list)
lambda.list <- lapply(seq_len(ncol(lambda.matrix)), function(i) lambda.matrix[,i])
library(penalizedclr)
devtools::check()
rm(list = c("stable.clr"))
devtools::check(manual = TRUE)

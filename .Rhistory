#######################
# penalized.clr with lambda provided by the user
fit1 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda = c(10, 20), p = p, standardize = TRUE)
nonzero_index <- (beta != 0) * 1
table(fitted = (fit1$penalized != 0) * 1, nonzero_index)
set.seed(123)
# covariates
X = cbind(matrix(rnorm(p[1] * K * (n_cases + n_ctrl), 0, 1), ncol = p[1]),
matrix(rnorm(p[2] * K * (n_cases + n_ctrl), 0, 2), ncol = p[2]))
# linear predictor
lin_pred <- beta_stratum + X %*% beta
prob_case <- exp(lin_pred) / (1 + exp(lin_pred))
# probability check
hist(prob_case)
hist(lin_pred)
# generate the response
require(tidyverse)
Y <- rep(0, length(stratum))
data_sim <- as_tibble(data.frame(stratum = stratum, probability = prob_case,
obs_id = 1 : length(stratum)))
data_sim_cases <- data_sim %>%
group_by(stratum)%>%
sample_n(n_cases, weight = probability)
data_sim
beta <- as.matrix(c(rep(10, m_nz[1]),
rep(0, p[1] - m_nz[1]),
rep(15, m_nz[2]),
rep(0, p[2] - m_nz[2])), ncol = 1)
beta_stratum <- rep(rnorm(K, 0, 2), each= n_cases+n_ctrl)
# stratum membership
stratum <- rep(1:K, each= n_cases+n_ctrl)
# linear predictor
lin_pred <- beta_stratum + X %*% beta
prob_case <- exp(lin_pred) / (1 + exp(lin_pred))
# probability check
hist(prob_case)
hist(lin_pred)
# generate the response
require(tidyverse)
Y <- rep(0, length(stratum))
data_sim <- as_tibble(data.frame(stratum = stratum, probability = prob_case,
obs_id = 1 : length(stratum)))
data_sim_cases <- data_sim %>%
group_by(stratum)%>%
sample_n(n_cases, weight = probability)
Y[data_sim_cases$obs_id] <- 1
#######################
#### function testing
#######################
# penalized.clr with lambda provided by the user
fit1 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda = c(10, 20), p = p, standardize = TRUE)
nonzero_index <- (beta != 0) * 1
table(fitted = (fit1$penalized != 0) * 1, nonzero_index)
# penalized.clr with lambda computed internally
fit2 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
p = p,
standardize = TRUE)
fit2$lambda
fit2$alpha
table(fitted = (fit2$penalized != 0) * 1, nonzero_index)
# penalized.clr with lambda computed internally, covariates not standardized
fit4 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
p = p,
standardize = FALSE)
table(fitted = (fit4$penalized != 0) * 1, nonzero_index)
# stability selection (all covariates penalized with the same penalty)
stable1 <- stable.clr(response = Y,
penalized = X, stratum = stratum,
lambda.seq = c(10,20))
which(stable1$P>0.6)
table(fitted = (stable1$P>0.6), nonzero_index)
# stability selection when lambda sequence is computed internally
stable2 <- stable.clr(response = Y,
penalized = X, stratum = stratum)
table(fitted = (stable2$P>0.6), nonzero_index)
lambda.list <- find.default.lambda(response = Y,
penalized = X, stratum = stratum,
p = p)
stable.g1 <- stable.clr.g(response = Y,
penalized = X,
stratum = stratum,
p = p,
lambda.list = lambda.list)
stable.g1$lambda.list
table(stable.g1$Pistab>0.6, nonzero_index)
beta
stable.g1 <- stable.clr.g(response = Y,
penalized = X,
stratum = stratum,
p = p,
lambda.list = list(c(5,20), c(5,10,20)))
table(stable.g1$Pistab>0.6, nonzero_index)
# two groups of predictors
p <- c(20, 10)
# percent of non-null variables
p_nz <- c(0.2, 0.8)
m_nz <- round(p*p_nz, 0)
# number of different strata (typically case-control pairs)
K <- 125
# number of cases and controls in each stratum
n_cases <- 1
n_ctrl <- 1
set.seed(123)
# covariates
X = cbind(matrix(rnorm(p[1] * K * (n_cases + n_ctrl), 0, 1), ncol = p[1]),
matrix(rnorm(p[2] * K * (n_cases + n_ctrl), 0, 2), ncol = p[2]))
# coefficients
beta <- as.matrix(c(rnorm(m_nz[1], 0, 0.8),
rep(0, p[1] - m_nz[1]),
rnorm(m_nz[2], 0.1, 0.4),
rep(0, p[2] - m_nz[2])), ncol = 1)
beta <- as.matrix(c(rep(10, m_nz[1]),
rep(0, p[1] - m_nz[1]),
rep(15, m_nz[2]),
rep(0, p[2] - m_nz[2])), ncol = 1)
beta_stratum <- rep(rnorm(K, 0, 2), each= n_cases+n_ctrl)
# stratum membership
stratum <- rep(1:K, each= n_cases+n_ctrl)
# linear predictor
lin_pred <- beta_stratum + X %*% beta
prob_case <- exp(lin_pred) / (1 + exp(lin_pred))
# probability check
hist(prob_case)
hist(lin_pred)
# generate the response
require(tidyverse)
Y <- rep(0, length(stratum))
data_sim <- as_tibble(data.frame(stratum = stratum, probability = prob_case,
obs_id = 1 : length(stratum)))
data_sim_cases <- data_sim %>%
group_by(stratum)%>%
sample_n(n_cases, weight = probability)
Y[data_sim_cases$obs_id] <- 1
#######################
#### function testing
#######################
# penalized.clr with lambda provided by the user
fit1 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda = c(10, 20), p = p, standardize = TRUE)
nonzero_index <- (beta != 0) * 1
table(fitted = (fit1$penalized != 0) * 1, nonzero_index)
# penalized.clr with lambda computed internally
fit2 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
p = p,
standardize = TRUE)
fit2$lambda
fit2$alpha
table(fitted = (fit2$penalized != 0) * 1, nonzero_index)
# penalized.clr with lambda computed internally when blocks (p) are not provided
fit3 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
standardize = TRUE)
fit3$lambda
fit3$alpha
table(fitted = (fit3$penalized != 0) * 1, nonzero_index)
# penalized.clr with lambda computed internally, covariates not standardized
fit4 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
p = p,
standardize = FALSE)
table(fitted = (fit4$penalized != 0) * 1, nonzero_index)
# stability selection (all covariates penalized with the same penalty)
stable1 <- stable.clr(response = Y,
penalized = X, stratum = stratum,
lambda.seq = c(10,20))
which(stable1$P>0.6)
table(fitted = (stable1$P>0.6), nonzero_index)
lambda.list <- find.default.lambda(response = Y,
penalized = X, stratum = stratum,
p = p)
stable.g1 <- stable.clr.g(response = Y,
penalized = X,
stratum = stratum,
p = p,
lambda.list = lambda.list)
stable.g1$lambda.list
table(stable.g1$Pistab>0.6, nonzero_index)
set.seed(123)
# covariates
X = cbind(matrix(rnorm(p[1] * K * (n_cases + n_ctrl), 1, 1), ncol = p[1]),
matrix(rnorm(p[2] * K * (n_cases + n_ctrl), 1, 2), ncol = p[2]))
# coefficients
beta <- as.matrix(c(rnorm(m_nz[1], 0, 0.8),
rep(0, p[1] - m_nz[1]),
rnorm(m_nz[2], 0.1, 0.4),
rep(0, p[2] - m_nz[2])), ncol = 1)
beta <- as.matrix(c(rep(10, m_nz[1]),
rep(0, p[1] - m_nz[1]),
rep(15, m_nz[2]),
rep(0, p[2] - m_nz[2])), ncol = 1)
beta_stratum <- rep(rnorm(K, 0, 2), each= n_cases+n_ctrl)
# stratum membership
stratum <- rep(1:K, each= n_cases+n_ctrl)
# linear predictor
lin_pred <- beta_stratum + X %*% beta
prob_case <- exp(lin_pred) / (1 + exp(lin_pred))
# probability check
hist(prob_case)
hist(lin_pred)
# generate the response
require(tidyverse)
Y <- rep(0, length(stratum))
data_sim <- as_tibble(data.frame(stratum = stratum, probability = prob_case,
obs_id = 1 : length(stratum)))
data_sim_cases <- data_sim %>%
group_by(stratum)%>%
sample_n(n_cases, weight = probability)
Y[data_sim_cases$obs_id] <- 1
#######################
#### function testing
#######################
# penalized.clr with lambda provided by the user
fit1 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda = c(10, 20), p = p, standardize = TRUE)
nonzero_index <- (beta != 0) * 1
table(fitted = (fit1$penalized != 0) * 1, nonzero_index)
# penalized.clr with lambda computed internally
fit2 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
p = p,
standardize = TRUE)
fit2$lambda
fit2$alpha
table(fitted = (fit2$penalized != 0) * 1, nonzero_index)
# penalized.clr with lambda computed internally when blocks (p) are not provided
fit3 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
standardize = TRUE)
fit3$lambda
fit3$alpha
table(fitted = (fit3$penalized != 0) * 1, nonzero_index)
# penalized.clr with lambda computed internally, covariates not standardized
fit4 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
p = p,
standardize = FALSE)
table(fitted = (fit4$penalized != 0) * 1, nonzero_index)
# stability selection (all covariates penalized with the same penalty)
stable1 <- stable.clr(response = Y,
penalized = X, stratum = stratum,
lambda.seq = c(10,20))
which(stable1$P>0.6)
table(fitted = (stable1$P>0.6), nonzero_index)
# stability selection when lambda sequence is computed internally
stable2 <- stable.clr(response = Y,
penalized = X, stratum = stratum)
table(fitted = (stable2$P>0.6), nonzero_index)
# stability selection when lambda sequence is computed externally and then passed to the function
lambda.seq <- penalizedclr:::default.lambda(X, Y, stratum, alpha=1)
stable3 <- stable.clr(response = Y,
penalized = X, stratum = stratum,
lambda.seq = lambda.seq)
table(fitted = (stable3$P>0.6), nonzero_index)
# changed the number of subsamples (influences computation time, default is 100)
stable4 <- stable.clr(response = Y,
penalized = X, stratum = stratum,
parallel = TRUE,
B=50)
table(fitted = (stable4$P>0.6), nonzero_index)
# stability selection when covariates are divided in blocks (sizes of blocks in p)
set.seed(123)
lambda.list <- find.default.lambda(response = Y,
penalized = X, stratum = stratum,
p = p)
stable.g1 <- stable.clr.g(response = Y,
penalized = X,
stratum = stratum,
p = p,
lambda.list = lambda.list)
stable.g1$lambda.list
table(stable.g1$Pistab>0.6, nonzero_index)
stable.g1$Pistab
table(fitted = (fit1$penalized != 0) * 1, nonzero_index)
nonzero_index
fit1$penalized
fit2$penalized
beta
?penalized.clr
fit2$lambda
# covariates
X = cbind(matrix(rnorm(p[1] * K * (n_cases + n_ctrl), 0, 1), ncol = p[1]),
matrix(rnorm(p[2] * K * (n_cases + n_ctrl), 0, 2), ncol = p[2]))
# coefficients
beta <- as.matrix(c(rnorm(m_nz[1], 0, 0.8),
rep(0, p[1] - m_nz[1]),
rnorm(m_nz[2], 0.1, 0.4),
rep(0, p[2] - m_nz[2])), ncol = 1)
beta <- as.matrix(c(rep(10, m_nz[1]),
rep(0, p[1] - m_nz[1]),
rep(15, m_nz[2]),
rep(0, p[2] - m_nz[2])), ncol = 1)
beta_stratum <- rep(rnorm(K, 0, 2), each= n_cases+n_ctrl)
# stratum membership
stratum <- rep(1:K, each= n_cases+n_ctrl)
# linear predictor
lin_pred <- beta_stratum + X %*% beta
prob_case <- exp(lin_pred) / (1 + exp(lin_pred))
# probability check
hist(prob_case)
hist(lin_pred)
# generate the response
require(tidyverse)
Y <- rep(0, length(stratum))
data_sim <- as_tibble(data.frame(stratum = stratum, probability = prob_case,
obs_id = 1 : length(stratum)))
data_sim_cases <- data_sim %>%
group_by(stratum)%>%
sample_n(n_cases, weight = probability)
Y[data_sim_cases$obs_id] <- 1
#######################
#### function testing
#######################
# penalized.clr with lambda provided by the user
fit1 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda = c(10, 20), p = p, standardize = TRUE)
nonzero_index <- (beta != 0) * 1
table(fitted = (fit1$penalized != 0) * 1, nonzero_index)
fit1$penalized
beta <- as.matrix(c(rep(1, m_nz[1]),
rep(0, p[1] - m_nz[1]),
rep(5, m_nz[2]),
rep(0, p[2] - m_nz[2])), ncol = 1)
beta_stratum <- rep(rnorm(K, 0, 2), each= n_cases+n_ctrl)
# stratum membership
stratum <- rep(1:K, each= n_cases+n_ctrl)
# linear predictor
lin_pred <- beta_stratum + X %*% beta
prob_case <- exp(lin_pred) / (1 + exp(lin_pred))
# probability check
hist(prob_case)
hist(lin_pred)
# generate the response
require(tidyverse)
Y <- rep(0, length(stratum))
data_sim <- as_tibble(data.frame(stratum = stratum, probability = prob_case,
obs_id = 1 : length(stratum)))
data_sim_cases <- data_sim %>%
group_by(stratum)%>%
sample_n(n_cases, weight = probability)
Y[data_sim_cases$obs_id] <- 1
#######################
#### function testing
#######################
# penalized.clr with lambda provided by the user
fit1 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda = c(10, 20), p = p, standardize = TRUE)
nonzero_index <- (beta != 0) * 1
table(fitted = (fit1$penalized != 0) * 1, nonzero_index)
# penalized.clr with lambda computed internally
fit2 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
p = p,
standardize = TRUE)
fit2$lambda
fit2$alpha
table(fitted = (fit2$penalized != 0) * 1, nonzero_index)
# penalized.clr with lambda computed internally when blocks (p) are not provided
fit3 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
standardize = TRUE)
fit3$lambda
fit3$alpha
table(fitted = (fit3$penalized != 0) * 1, nonzero_index)
# penalized.clr with lambda computed internally, covariates not standardized
fit4 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
p = p,
standardize = FALSE)
table(fitted = (fit4$penalized != 0) * 1, nonzero_index)
# stability selection (all covariates penalized with the same penalty)
stable1 <- stable.clr(response = Y,
penalized = X, stratum = stratum,
lambda.seq = c(10,20))
which(stable1$P>0.6)
table(fitted = (stable1$P>0.6), nonzero_index)
# stability selection when lambda sequence is computed internally
stable2 <- stable.clr(response = Y,
penalized = X, stratum = stratum)
table(fitted = (stable2$P>0.6), nonzero_index)
lambda.list <- find.default.lambda(response = Y,
penalized = X, stratum = stratum,
p = p)
stable.g1 <- stable.clr.g(response = Y,
penalized = X,
stratum = stratum,
p = p,
lambda.list = lambda.list)
stable.g1$lambda.list
table(stable.g1$Pistab>0.6, nonzero_index)
# covariates
X = cbind(matrix(rnorm(p[1] * K * (n_cases + n_ctrl), 1, 1), ncol = p[1]),
matrix(rnorm(p[2] * K * (n_cases + n_ctrl), 0, 2), ncol = p[2]))
# coefficients
beta <- as.matrix(c(rnorm(m_nz[1], 0, 0.8),
rep(0, p[1] - m_nz[1]),
rnorm(m_nz[2], 0.1, 0.4),
rep(0, p[2] - m_nz[2])), ncol = 1)
beta <- as.matrix(c(rep(1, m_nz[1]),
rep(0, p[1] - m_nz[1]),
rep(5, m_nz[2]),
rep(0, p[2] - m_nz[2])), ncol = 1)
beta_stratum <- rep(rnorm(K, 0, 2), each= n_cases+n_ctrl)
# stratum membership
stratum <- rep(1:K, each= n_cases+n_ctrl)
# linear predictor
lin_pred <- beta_stratum + X %*% beta
prob_case <- exp(lin_pred) / (1 + exp(lin_pred))
# probability check
hist(prob_case)
hist(lin_pred)
# generate the response
require(tidyverse)
Y <- rep(0, length(stratum))
data_sim <- as_tibble(data.frame(stratum = stratum, probability = prob_case,
obs_id = 1 : length(stratum)))
data_sim_cases <- data_sim %>%
group_by(stratum)%>%
sample_n(n_cases, weight = probability)
Y[data_sim_cases$obs_id] <- 1
#######################
#### function testing
#######################
# penalized.clr with lambda provided by the user
fit1 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
lambda = c(10, 20), p = p, standardize = TRUE)
nonzero_index <- (beta != 0) * 1
table(fitted = (fit1$penalized != 0) * 1, nonzero_index)
# penalized.clr with lambda computed internally
fit2 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
p = p,
standardize = TRUE)
fit2$lambda
fit2$alpha
table(fitted = (fit2$penalized != 0) * 1, nonzero_index)
# penalized.clr with lambda computed internally when blocks (p) are not provided
fit3 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
standardize = TRUE)
fit3$lambda
fit3$alpha
table(fitted = (fit3$penalized != 0) * 1, nonzero_index)
# penalized.clr with lambda computed internally, covariates not standardized
fit4 <- penalized.clr(response = Y, penalized = X, stratum = stratum,
p = p,
standardize = FALSE)
table(fitted = (fit4$penalized != 0) * 1, nonzero_index)
# stability selection (all covariates penalized with the same penalty)
stable1 <- stable.clr(response = Y,
penalized = X, stratum = stratum,
lambda.seq = c(10,20))
which(stable1$P>0.6)
table(fitted = (stable1$P>0.6), nonzero_index)
# stability selection when lambda sequence is computed internally
stable2 <- stable.clr(response = Y,
penalized = X, stratum = stratum)
table(fitted = (stable2$P>0.6), nonzero_index)
# stability selection when lambda sequence is computed externally and then passed to the function
lambda.seq <- penalizedclr:::default.lambda(X, Y, stratum, alpha=1)
stable3 <- stable.clr(response = Y,
penalized = X, stratum = stratum,
lambda.seq = lambda.seq)
table(fitted = (stable3$P>0.6), nonzero_index)
# changed the number of subsamples (influences computation time, default is 100)
stable4 <- stable.clr(response = Y,
penalized = X, stratum = stratum,
parallel = TRUE,
B=50)
table(fitted = (stable4$P>0.6), nonzero_index)
# stability selection when covariates are divided in blocks (sizes of blocks in p)
set.seed(123)
lambda.list <- find.default.lambda(response = Y,
penalized = X, stratum = stratum,
p = p)
stable.g1 <- stable.clr.g(response = Y,
penalized = X,
stratum = stratum,
p = p,
lambda.list = lambda.list)
stable.g1$lambda.list
table(stable.g1$Pistab>0.6, nonzero_index)
stable.g1 <- stable.clr.g(response = Y,
penalized = X,
stratum = stratum,
p = p,
lambda.list = list(c(5,20), c(5,10,20)))
table(stable.g1$Pistab>0.6, nonzero_index)
devtools::load_all(".")
source('~/.active-rstudio-document', echo=TRUE)
devtools::build()
devtools::install()
devtools::build_vignettes()
?penalized.clr
devtools::build()
devtools::check()
devtools::check()
devtools::build()
.Last.error.trace
devtools::check()
devtools::check()
devtools::check()
devtools::build_vignettes()
devtools::check()
?penalized
devtools::build_vignettes()
browseVignettes(penalizedclr)
browseVignettes("penalizedclr")
devtools::build()
?subsample.clr
?subsample.clr
devtools::check_win_devel()
devtools::check_rhub()
devtools::build()
devtools::build()
?penalized
devtools::build()
library(penalizedclr)
devtools::check("penalizedclr")
devtools::check(penalizedclr)
devtools::check("penalizedclr")
